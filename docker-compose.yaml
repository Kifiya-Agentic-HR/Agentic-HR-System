services:

  # cms_backend:
  #   build: ./services/cms/backend
  #   container_name: CMSBackend
  #   ports:
  #     - "${CMS_BACKEND_PORT}:3000"
  #   depends_on:
  #     - mongo
  #     - redis
  #     - notification
  #   env_file: .env
  #   environment:
  #     PORT: 3000
  #     MONGO_URI: "mongodb://mongo:27017/hr_db"
  #     MONGO_DB: "hr_db"
  #     MONGO_INITDB_DATABASE: "hr_db"
  #     REDIS_URI: "redis://redis:6379"
  #     NOTIFICATION_SERVICE_URL: "http://notification:${NOTIFICATION_PORT}/api/v1/"
  #     FRONTEND_BASE_URL: "http://localhost:${CMS_FRONTEND_PORT}"
  #   networks:
  #     - app_network
    
  # cms_frontend:
  #   build: ./services/cms/frontend
  #   container_name: CMSFrontend
  #   ports:
  #     - "${CMS_FRONTEND_PORT}:3000"
  #   depends_on:
  #     - cms_backend
  #   env_file: .env
  #   environment:
  #     NEXT_PUBLIC_API_BASE_URL: "http://localhost:${CMS_BACKEND_PORT}"
  #   networks:
  #     - app_network
  #   volumes:
  #     - shared_volume:/shared_volume  # Added shared volume

    
  interview_backend:
    build: ./services/interview_ai/backend
    container_name: InterviewBackend
    ports:
      - "${INTERVIEW_BACKEND_PORT}:8080"
    depends_on:
      - mongo
      - redis
      - notification
      - weaviate
    env_file: .env
    environment:
      MONGO_URI: "mongodb://mongo:27017/hr_db"
      MONGO_DB: "hr_db"
      REDIS_URI: "redis://redis:6379"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      MODEL: "${MODEL}"
      NOTIFICATION_SERVICE_URL: "http://notification:${NOTIFICATION_PORT}/api/v1/"
      FRONTEND_BASE_URL: "http://localhost:${INTERVIEW_FRONTEND_PORT}"
      WEAVIATE_URL: "http://weaviate:8080"
    networks:
      - app_network
    volumes:
      - shared_volume:/shared_volume  # Added shared volume

  interview_frontend:
    build: ./services/interview_ai/frontend
    container_name: InterviewFrontend
    ports:
      - "${INTERVIEW_FRONTEND_PORT}:3000"
    depends_on:
      - interview_backend
    env_file: .env
    environment:
      NEXT_PUBLIC_API_BASE_URL: "http://localhost:8080/api/v1"
      INTERVIEW_BACKEND: "http://localhost:${INTERVIEW_BACKEND_PORT}"
    networks:
      - app_network

  # Screening Microservice
  job_service_backend:
    build: ./services/job_service/backend
    container_name: job_service_backend
    ports:
      - "${JOB_APPLICATION_PORT}:9000"
    env_file: .env
    environment:
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      MONGODB_URI: "mongodb://mongo:27017/hr_db"  # Using local MongoDB
      GEMINI_API_KEY: "${GEMINI_API_KEY}"  # Consider moving to .env
      UPLOAD_DIR: "/shared_volume"
      NOTIFICATION_SERVICE_URL: "http://notification:${NOTIFICATION_PORT}/api/v1/"
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_URL: "http://s3-server:9000"

    volumes:
      - shared_volume:/shared_volume
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      s3-server:
        condition: service_healthy
      mc:
        condition: service_started
  
    networks:
      - app_network

  screening_consumer:
    build:
      context: ./services/screen_service/
      dockerfile: Dockerfile.consumer
    container_name: ScreeningConsumer
    env_file: .env
    environment:
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      MONGODB_URI: "mongodb://mongo:27017/hr_db"
      GEMINI_API_KEY: "${GEMINI_API_KEY}"
      PYTHONPATH: "/src"

    volumes:
      - shared_volume:/shared_volume
    # restart: unless-stopped
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy

    networks:
      - app_network

  # Shared Infrastructure Services
  mongo:
    image: mongo:latest
    command: mongod --quiet --logpath /dev/null
    container_name: Mongo
    restart: always
    ports:
      - "27027:27017"
    volumes:
      - ./data/mongo:/data/db
    environment:
      MONGO_INITDB_DATABASE: hr_db
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: Redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    volumes:
      - redis-data:/data

  notification:
    build: ./services/notification
    ports:
      - "${NOTIFICATION_PORT}:8000"
    env_file: .env
    
    environment:
      PORT: 8000
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
      REDIS_URI: "redis://redis:6379/0"
    networks:
      - app_network
    depends_on:
      - redis

  rabbitmq:
    image: rabbitmq:4.0-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  # job_portal:
  #   build: ./services/screening/job-portal
  #   env_file: .env
  #   ports:
  #     - "${JOB_PORTAL_PORT}:3000"
  #   environment:
  #     BASE_API_URL: "http://screening_api:${JOB_APPLICATION_PORT}"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   depends_on:
  #     - screening_api
  #   networks:
  #     - app_network
  #   restart: unless-stopped
  
  s3-server:
    image: minio/minio:latest
    container_name: UploadServer
    ports:
      - "${S3_API_PORT}:9000" # S3 API Port
      - "${S3_WEB_PORT}:9001" # Web UI
    env_file:
      - .env
    volumes:
      - s3-data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network

  mc:
    image: minio/mc
    container_name: mc-init
    depends_on:
      s3-server:
        condition: service_healthy
    entrypoint: > 
      /bin/sh -c "
        # Wait until MinIO is available
        # Set alias (using the same credentials as your .env)
        mc alias set myminio http://s3-server:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;
        # Create bucket if it doesn't exist; ignore error if already exists
        mc mb --ignore-existing myminio/$CV_BUCKET;
        # Set bucket policy to public (allows s3:GetObject to everyone)
        mc anonymous set download myminio/$CV_BUCKET;
        echo 'Bucket policy set to public for bucket $CV_BUCKET';
        exit 0;
      "
    env_file:
      - .env
    networks:
      - app_network
  
  weaviate:
    image: semitechnologies/weaviate:1.23.0
    container_name: Weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 20
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-transformers'
      ENABLE_MODULES: 'text2vec-transformers'
      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers:8080'
    ports:
      - 8082:8080
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-all-MiniLM-L6-v2
    container_name: Transformers
    environment:
      ENABLE_CUDA: 0
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3


networks:
  app_network:
    driver: bridge

volumes:
  shared_volume:
  rabbitmq_data:
  redis-data:
  s3-data: